1
00:00:00,760 --> 00:00:04,490
You have now successfully mastered
the generation of Sigma Points,

2
00:00:04,490 --> 00:00:08,119
and even implemented an example in C++.

3
00:00:08,119 --> 00:00:11,460
Really great job, and you know what?

4
00:00:11,460 --> 00:00:13,300
This was the most difficult and

5
00:00:13,300 --> 00:00:17,680
complicated part, all the remaining
steps will be much simpler.

6
00:00:17,680 --> 00:00:20,490
Let's move on the prediction
of Sigma Points.

7
00:00:20,490 --> 00:00:24,330
What we have now is this matrix
of augmented Sigma Points.

8
00:00:24,330 --> 00:00:25,760
For the prediction step,

9
00:00:25,760 --> 00:00:29,270
we simply insert every Sigma Point
into the process model.

10
00:00:30,280 --> 00:00:35,420
Again, we store every predicted
Sigma Point as a column of a matrix,

11
00:00:35,420 --> 00:00:39,473
we call this matrix calligraphic Xk+1|k.

12
00:00:39,473 --> 00:00:42,420
When you will bring this to C++ code,

13
00:00:42,420 --> 00:00:46,210
the main thing you have to do
is implement this process model.

14
00:00:46,210 --> 00:00:50,250
One thing you should also consider,
the input to the process model

15
00:00:50,250 --> 00:00:54,050
is a seven dimensional Augmented vector,
which makes sense.

16
00:00:54,050 --> 00:00:58,270
These are five state dimensions and
two noise dimensions.

17
00:00:58,270 --> 00:01:01,020
The output is a five dimensional vector,

18
00:01:01,020 --> 00:01:04,480
because this is what the process
model returns, that means

19
00:01:04,480 --> 00:01:09,562
the matrix with the predicted Sigma
Points has five rows and 15 columns.

20
00:01:09,562 --> 00:01:10,400
All right,

21
00:01:10,400 --> 00:01:13,710
that's everything you need to know
about the prediction of Sigma Points.

22
00:01:13,710 --> 00:01:16,645
Let's see if you can
implement this in C++.
